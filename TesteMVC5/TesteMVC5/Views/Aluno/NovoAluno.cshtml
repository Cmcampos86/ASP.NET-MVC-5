@* Qual model vou trabalhar *@
@model TesteMVC5.Models.Aluno

<h2>Novo Aluno</h2>

@* using: cria um contexto *@
@using (Html.BeginForm())
{
    <!-- Gera token e vai embutir no formulário-->
    <!-- O token é usado somente uma vez e é enviado no header também-->
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Informe os dados do aluno:</h4>
        <hr />

        @* Mostra os erros de validação *@
        @* O valor true esconde os erros das propriedades e false não *@
        @* O segundo parâmetro pode receber uma mensagem para os erros *@
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CPF, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Ativo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBoxFor(model => model.Ativo, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        
        <!-- Declaração de PartialView -->
        <!-- Se a partialView estiver dentro de uma pasta específica, vai funcionar só lá, mas se for
            global, deve estar na pastra Shared-->
        <!-- A partial aceita Model -->

        @Html.Partial("_SubmissaoForm")
    </div>
}

@section Scripts
{
    @* jquery.validate: valido o formulário *@
    @* Validar no javascript alivia o fato de fazer validação no servidor, mas a validação do backend tb deve ser feita *@
    @* O caminho bundles/jqueryval contem os script que são definidos no layout através do @RenderSection *@

    @Scripts.Render("~/bundles/jqueryval")
}
